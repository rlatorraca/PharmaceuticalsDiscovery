# -*- coding: utf-8 -*-
"""PharmaceuticalsDiscovery .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dwcRgywrz3kqCfptNs3jEpZ0Ahw9yE2z
"""

import pandas as pd

url_data = "https://github.com/rlatorraca/PharmaceuticalsDiscovery/blob/master/data/dados_experimentos.zip?raw=true"

# Create a DATA FRAME
data = pd.read_csv(url_data, compression = 'zip')

"""Cada linha é um ***cultura de celula*** que foi submetido a inclusão de drogas para que possam ser estudadas as suas respostas ao experimento.

- id = identificador único
- tratamento = [com droga | com controle]


"""

# Show first 5 rows on Data Frame
data.head()

# Last 5 rows on Data Frame
data.tail()

# Number of row and colummns
data.shape

# Just plot the Column = tratamento (Series)
data['tratamento']

# Return the uniques values of the Column
data['tratamento'].unique()

# Time of exposure to the drug before analyzing the responses to that exposure.
data['tempo'].unique()

# 2 differents quantity of drugs
data['dose'].unique()

# Total of drugs in this Data Frame
# "Encrypted / modified" data to make analysis less biased
data['droga'].unique()

# g = gene
data['g-0'].unique()

# Frequency in 'Tratamento'
data['tratamento'].value_counts()

# Calculus of the proportion of experiments in 'TRATAMENTO' with "Drogas" and "Controle": 
trat_values = data['tratamento'].value_counts()
proportion_tratamento = trat_values[0] / trat_values[1]
print(proportion_tratamento)

# OR Normalize in 'TRATAMENTO'
data['tratamento'].value_counts(normalize = 'true')

data['tratamento'].value_counts(normalize = 'true').plot.bar()

# Frequency in 'Doses'
data['dose'].value_counts()

# Calculus of the proportion of experiments in 'DOSE'with "D1" and "D2": 
dose_values = data['dose'].value_counts()
proportion_dose = dose_values[0] / dose_values[1]
print(proportion_dose)

# OR Normalize in 'DOSE'
data['dose'].value_counts(normalize = 'true')

data['dose'].value_counts(normalize = 'true').plot.bar()

# Just printing g-0 > 0
data[data['g-0'] > 0]

# Put on atribute g-0 > ZERO
g0_upper_zero = data[data['g-0'] > 0]

# Print the new DF g-0 > ZERO
g0_upper_zero.head()

data.rename(columns = {'g-0': 'Year', 'value': 'Income'}, inplace = False)

# Change name of column 'droga'to 'composto'
map = {'droga': 'composto'}
data.rename(columns=map, inplace=True)

data.head()

# importing SEABORN
import seaborn as sns

# Ploting all values of column composto
# Bad visualization
sns.countplot(x='composto', data=data)

# Ploting just the 5 bigger compostos in numbers
compostos = data['composto'].value_counts()[:10]

compostos.index

# Ploting just the 5 bigger index of compostos
code_compostos = data['composto'].value_counts().index[:10]

code_compostos

# getting just the row of 5 bigger in numbers
data.query('composto in @code_compostos')

# Set up and importing Matplotlib
import matplotlib.pyplot as plt
sns.set()

# Ploting 10 bigger compostos
data_compostos = data.query('composto in @code_compostos')
plt.figure(figsize=(20,10))
ax = sns.countplot(x='composto', data=data_compostos)
ax.set_title('Top 10 de Compostos')
plt.show()

# how many g-0 do we have ?
len(data['g-0'].unique())